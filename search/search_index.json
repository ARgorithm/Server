{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Server \u00b6 ARgorithm has a common server endpoint where the community can create and contribute their own ARgorithms. This, by default, is the endpoint for the toolkit command line. But in case a programmer wants to setup a local server for testing purposes or wants to setup a specific server for their class or organisation. The following steps are to be followed. System Requirements \u00b6 The server is built using FastAPI. The requirements for running the application is given below Python 3.6+ fastapi uvicorn[standard] gunicorn jinja2 aiofiles python-multipart databases[sqlite] python-jose passlib[bcrypt] motor tornado dnspython pytest ARgorithmToolkit PyJWT aioredis prometheus-client Use gunicorn to run as a production server. Docker-ce will be required if server image is being used. Installation \u00b6 You can clone the git repository and install requirements from the requirements.txt file. $ git clone https://github.com/ARgorithm/Server.git Cloning into 'Server' ---> 100% $ cd Server/app $ pip install -r requirements.txt ---> 100% Successfully installed packages or you can pull the image $ docker pull alanjohn/argorithm-server Using default tag: latest latest: Pulling from alanjohn/argorithm-server ---> 100% Status: Downloaded new image alanjohn/argorithm-server Configuring the Server \u00b6 The application can be run in several different modes: In-app database \u00b6 No authentication or authorization services. Data is stored using sqlite database. By default, it runs in this mode. mongodb database \u00b6 No authentication or authorization services. Data is stored in a mongodb database of your choice. Requires setting some environment variables: DATABASE=mongodb DB_USERNAME=yourdbusername DB_PASSWORD=yourdbpassword DB_ENDPOINT=yourdbendpoint DB_PORT=27017 Info If using a cloud mongo database like atlas which provides mongo+srv url as endpoint, you just need to paste that URL as your DB_ENDPOINT . You can ignore the DB_USERNAME and DB_PASSWORD env variables. mongodb with auth \u00b6 Authorization on all basic routes. Data is stored in a mongodb database of your choice. This is an enhancement to the previous mode so along with the same required envs. SECRET_KEY=yoursecretkey ADMIN_EMAIL=sample@email.com ADMIN_PASSWORD=test123 caching \u00b6 Caching on state generation when execution request comes on /argorithms/run . Uses redis for implementing LRU cache. The following environment variables have to be set CACHING=ENABLED REDIS_HOST=redis REDIS_PORT=6379 REDIS_PASSWORD=notmypassword monitoring \u00b6 By default, prometheus metrics have been implemented and can be accessed at /metrics route. Programmer can secure the route by using the METRICS_TOKEN environment variable to add authorization bearer token. If not given then by default, there is no authorization required METRICS_TOKEN=yourmetricstoken You can check out the grafana folder in the code repository for a ARgorithm specific dashboard Docker-compose examples \u00b6 Refer to the Dockerfile for the default values of these environment variables. The repo comes with two docker compose configuration files. docker-compose.local.yml : runs application in default mode version : \"3\" services : arserver : image : alanjohn/argorithm-server:latest ports : - 80:80 volumes : - local-uploads:/tmp/argorithm volumes : local-uploads : driver : local docker-compose.prod.yml : runs application with mongodb and auth and will setup mongodb database. A redis server is launched to handle caching and prometheus and grafana nodes are created for monitoring It will read environment variables from .env file # Sets up multiple services to demonstrate how a server cluster would run with cloud storage, authorization, caching and monitoring # This file requires the existense of .env with neccessary variable # The docker-compose file is added for emulation of how the application can be setup with full functionality version : \"3\" services : mongodb : image : mongo ports : - 27017:27017 environment : - MONGO_INITDB_ROOT_USERNAME=${DB_USERNAME} - MONGO_INITDB_ROOT_PASSWORD=${DB_PASSWORD} volumes : - mongo-data:/data/db redis : image : redis ports : - 6379:6379 volumes : - ./redis.conf:/usr/local/etc/redis/redis.conf command : redis-server /usr/local/etc/redis/redis.conf arserver : image : alanjohn/argorithm-server:latest ports : - 80:80 environment : - DATABASE=MONGO - AUTH=ENABLED - SECRET_KEY=${SECRET_KEY} - DB_USERNAME=${DB_USERNAME} - DB_PASSWORD=${DB_PASSWORD} - DB_ENDPOINT=mongodb - DB_PORT=27017 - ADMIN_EMAIL=${ADMIN_EMAIL} - ADMIN_PASSWORD=${ADMIN_PASSWORD} - CACHING=ENABLED - REDIS_HOST=redis - REDIS_PORT=6379 - REDIS_PASSWORD=notmypassword volumes : - uploads:/tmp/argorithm depends_on : - mongodb - redis prometheus : image : prom/prometheus ports : - 9090:9090 command : - --config.file=/etc/prometheus/prometheus.yml volumes : - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro depends_on : - arserver grafana : image : grafana/grafana ports : - 3000:3000 volumes : - ./grafana/datasource.yml:/etc/grafana/provisioning/datasource.yml env_file : - ./grafana/config.monitoring depends_on : - prometheus volumes : mongo-data : driver : local uploads : driver : local The environment variables in above compose files are read from .env file. You can create strong secret keys using $ openssl rand -hex 32 09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7 Running the server \u00b6 Running the application using uvicorn $ uvicorn main:app --reload INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) INFO: Started reloader process [28720] INFO: Started server process [28722] INFO: Waiting for application startup. INFO: Application startup complete. Running the application as a docker container $ docker run --name -d server -p 80 :80 --env-file = .env alanjohn/argorithm-server:latest server Running the application using docker-compose $ docker-compose -f docker-compose.prod.yml up Creating network \"server_default\" with the default driver Creating server_mongodb_1 ... done Creating server_arserver_1 ... done Attaching to server_mongodb_1,server_arserver_1 Interacting with server \u00b6 Once the server is running, you can check whether its running by entering the public IP in a browswer. You can check the api routes on /docs page with the help of FastAPI Swagger UI. You can get the api routes in json format at the /openapi.json . There are two type of accounts in the server: Programmer User The programmer account allows you to create and manage argorithms. The user account allows you to run argorithms and get states. When using the CLI account new command, it creates both, a programmer and a user account for that email. The mobile application can only create user accounts. Logs are generated in the server.log file which you will find in /tmp/argorithm . The server.log file contains request based logs for every path. Application metrics are available at /metrics","title":"Server"},{"location":"#server","text":"ARgorithm has a common server endpoint where the community can create and contribute their own ARgorithms. This, by default, is the endpoint for the toolkit command line. But in case a programmer wants to setup a local server for testing purposes or wants to setup a specific server for their class or organisation. The following steps are to be followed.","title":"Server"},{"location":"#system-requirements","text":"The server is built using FastAPI. The requirements for running the application is given below Python 3.6+ fastapi uvicorn[standard] gunicorn jinja2 aiofiles python-multipart databases[sqlite] python-jose passlib[bcrypt] motor tornado dnspython pytest ARgorithmToolkit PyJWT aioredis prometheus-client Use gunicorn to run as a production server. Docker-ce will be required if server image is being used.","title":"System Requirements"},{"location":"#installation","text":"You can clone the git repository and install requirements from the requirements.txt file. $ git clone https://github.com/ARgorithm/Server.git Cloning into 'Server' ---> 100% $ cd Server/app $ pip install -r requirements.txt ---> 100% Successfully installed packages or you can pull the image $ docker pull alanjohn/argorithm-server Using default tag: latest latest: Pulling from alanjohn/argorithm-server ---> 100% Status: Downloaded new image alanjohn/argorithm-server","title":"Installation"},{"location":"#configuring-the-server","text":"The application can be run in several different modes:","title":"Configuring the Server"},{"location":"#in-app-database","text":"No authentication or authorization services. Data is stored using sqlite database. By default, it runs in this mode.","title":"In-app database"},{"location":"#mongodb-database","text":"No authentication or authorization services. Data is stored in a mongodb database of your choice. Requires setting some environment variables: DATABASE=mongodb DB_USERNAME=yourdbusername DB_PASSWORD=yourdbpassword DB_ENDPOINT=yourdbendpoint DB_PORT=27017 Info If using a cloud mongo database like atlas which provides mongo+srv url as endpoint, you just need to paste that URL as your DB_ENDPOINT . You can ignore the DB_USERNAME and DB_PASSWORD env variables.","title":"mongodb database"},{"location":"#mongodb-with-auth","text":"Authorization on all basic routes. Data is stored in a mongodb database of your choice. This is an enhancement to the previous mode so along with the same required envs. SECRET_KEY=yoursecretkey ADMIN_EMAIL=sample@email.com ADMIN_PASSWORD=test123","title":"mongodb with auth"},{"location":"#caching","text":"Caching on state generation when execution request comes on /argorithms/run . Uses redis for implementing LRU cache. The following environment variables have to be set CACHING=ENABLED REDIS_HOST=redis REDIS_PORT=6379 REDIS_PASSWORD=notmypassword","title":"caching"},{"location":"#monitoring","text":"By default, prometheus metrics have been implemented and can be accessed at /metrics route. Programmer can secure the route by using the METRICS_TOKEN environment variable to add authorization bearer token. If not given then by default, there is no authorization required METRICS_TOKEN=yourmetricstoken You can check out the grafana folder in the code repository for a ARgorithm specific dashboard","title":"monitoring"},{"location":"#docker-compose-examples","text":"Refer to the Dockerfile for the default values of these environment variables. The repo comes with two docker compose configuration files. docker-compose.local.yml : runs application in default mode version : \"3\" services : arserver : image : alanjohn/argorithm-server:latest ports : - 80:80 volumes : - local-uploads:/tmp/argorithm volumes : local-uploads : driver : local docker-compose.prod.yml : runs application with mongodb and auth and will setup mongodb database. A redis server is launched to handle caching and prometheus and grafana nodes are created for monitoring It will read environment variables from .env file # Sets up multiple services to demonstrate how a server cluster would run with cloud storage, authorization, caching and monitoring # This file requires the existense of .env with neccessary variable # The docker-compose file is added for emulation of how the application can be setup with full functionality version : \"3\" services : mongodb : image : mongo ports : - 27017:27017 environment : - MONGO_INITDB_ROOT_USERNAME=${DB_USERNAME} - MONGO_INITDB_ROOT_PASSWORD=${DB_PASSWORD} volumes : - mongo-data:/data/db redis : image : redis ports : - 6379:6379 volumes : - ./redis.conf:/usr/local/etc/redis/redis.conf command : redis-server /usr/local/etc/redis/redis.conf arserver : image : alanjohn/argorithm-server:latest ports : - 80:80 environment : - DATABASE=MONGO - AUTH=ENABLED - SECRET_KEY=${SECRET_KEY} - DB_USERNAME=${DB_USERNAME} - DB_PASSWORD=${DB_PASSWORD} - DB_ENDPOINT=mongodb - DB_PORT=27017 - ADMIN_EMAIL=${ADMIN_EMAIL} - ADMIN_PASSWORD=${ADMIN_PASSWORD} - CACHING=ENABLED - REDIS_HOST=redis - REDIS_PORT=6379 - REDIS_PASSWORD=notmypassword volumes : - uploads:/tmp/argorithm depends_on : - mongodb - redis prometheus : image : prom/prometheus ports : - 9090:9090 command : - --config.file=/etc/prometheus/prometheus.yml volumes : - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro depends_on : - arserver grafana : image : grafana/grafana ports : - 3000:3000 volumes : - ./grafana/datasource.yml:/etc/grafana/provisioning/datasource.yml env_file : - ./grafana/config.monitoring depends_on : - prometheus volumes : mongo-data : driver : local uploads : driver : local The environment variables in above compose files are read from .env file. You can create strong secret keys using $ openssl rand -hex 32 09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7","title":"Docker-compose examples"},{"location":"#running-the-server","text":"Running the application using uvicorn $ uvicorn main:app --reload INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) INFO: Started reloader process [28720] INFO: Started server process [28722] INFO: Waiting for application startup. INFO: Application startup complete. Running the application as a docker container $ docker run --name -d server -p 80 :80 --env-file = .env alanjohn/argorithm-server:latest server Running the application using docker-compose $ docker-compose -f docker-compose.prod.yml up Creating network \"server_default\" with the default driver Creating server_mongodb_1 ... done Creating server_arserver_1 ... done Attaching to server_mongodb_1,server_arserver_1","title":"Running the server"},{"location":"#interacting-with-server","text":"Once the server is running, you can check whether its running by entering the public IP in a browswer. You can check the api routes on /docs page with the help of FastAPI Swagger UI. You can get the api routes in json format at the /openapi.json . There are two type of accounts in the server: Programmer User The programmer account allows you to create and manage argorithms. The user account allows you to run argorithms and get states. When using the CLI account new command, it creates both, a programmer and a user account for that email. The mobile application can only create user accounts. Logs are generated in the server.log file which you will find in /tmp/argorithm . The server.log file contains request based logs for every path. Application metrics are available at /metrics","title":"Interacting with server"},{"location":"contributing/","text":"Contributing to ARgorithm \u00b6 First off, thanks for taking the time to contribute! The following is a set of guidelines for contributing to ARgorithm Server, which are hosted in the ARgorithm Organization on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request. Table of contents Code of Conduct How do I contribute About ARgorithm Getting started Issues Pull requests Contact Code of conduct \u00b6 You can read the code of conduct here How can I contribute \u00b6 We love your input! There are many ways to be contributor to our project: Reporting a bug Discussing the current state of the code Submitting a fix Proposing new features Becoming a maintainer About ARgorithm \u00b6 You can read more about our project here You can read more about the internal workings of ARgorithm Project in the wiki Getting Started \u00b6 Prerequisites REST API FastAPI Asynchronous programming Docker MongoDB SQLite PostgresSQL Prometheus Environment Setup \u00b6 Download docker and docker-compose Download docker and docker-compose on your PC as most of the server functionalities and tests revolve around docker. You can see how to here Python Environment check your python version $ python version Python 3.7.6 Python version 3.7 and 3.8 are currently verified to be working properly so it's recommended to use those. Once you activate your environment $ git clone https://github.com/ARgorithm/Server.git Cloning into 'Server' ---> 100% $ cd Server/app $ pip install -r requirements.txt ---> 100% Successfully installed packages Application Structure \u00b6 app/ The app directory contains the REST API made using FastAPI as the app module. It also contains the requirements.txt file with the application dependecies. The test/ subdirectory contains tests written for FastAPI written with the help of PyTest. The static/ folder contains static assets used in the web pages. The app module has the following submodules: api : contains the API routes which the REST API provides the endpoints core : manages the database integrations, data managers, security and other 3rd party extensions model : contains the data models as well as the execution system for ARgorithms monitoring : creates prometheus based monitoring metrics migrations : manages database migrations templates : webpages and email templates docs/ Server documentation using mkdocs with a Makefile for ease of use grafana/ Grafana configuration along with a dashboard designed specifically for ARgorithm Docker image files Dockerfile .dockerignore start.sh Has the script to start ARgorithm Server instance withing image gunicorn_conf.py Gunicorn is used to run the production server so this file is used to configure that in the image. Docker compose files Docker compose files can be used to check how the application behaves with different configurations in different environments. Read more here Prometheus conf Files These files are used for setting up prometheus and alertmanager for Server instance prometheus.yml alertmanager.yml alert.rules.yml You can find more information in the docs or get in touch with us. Creating Issues \u00b6 Issues are divided into 3 types for simplicity Bug Report ( template ) Feature Request ( template ) Question ( template ) Bug report \u00b6 Before submitting a bug report, check for similar bug reports Explain the problem and include additional details to help maintainers reproduce the problem: Use the bug report template Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. For example, start by explaining how you used ARgorithm, e.g. which command exactly you used in the terminal. When listing steps, don't just say what you did, but explain how you did it . Provide specific examples to demonstrate the steps . Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. If you're providing snippets in the issue, use Markdown code blocks . Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior. Explain which behavior you expected to see instead and why. Include screenshots and animated GIFs which show you following the described steps and clearly demonstrate the problem. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. If you're reporting that Server crashed , include a crash report with a stack trace. If the problem is related to performance or memory , include a CPU profile capture with your report. If the problem wasn't triggered by a specific action , describe what you were doing before the problem happened and share more information using the guidelines below. Provide more context by answering these questions: Did the problem start happening recently (e.g. after updating to a new version of ARgorithm) or was this always a problem? Can you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens. Include details about your configuration and environment: Which version of dependencies are you using? You can get that by using your python package manager If not using the Docker image, What's the name and version of the OS you're using ? Which packages do you have installed? You can get that list by running pip list . Feature request \u00b6 Before creating enhancement suggestions, please check for similar already existing requests as you might find out that you don't need to create one. When you are creating an enhancement suggestion, please include as many details as possible. Fill in the template, including the steps that you imagine you would take if the feature you're requesting existed. Use the feature request template Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Provide specific examples to demonstrate the steps . Include copy/pasteable snippets which you use in those examples, as Markdown code blocks . Describe the current behavior and explain which behavior you expected to see instead and why. Include screenshots and animated GIFs which help you demonstrate the steps or point out the part of Atom which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. Explain why this enhancement would be useful to most ARgorithm users Question \u00b6 Question issues are so that users to ask how to use different features of ARgorithm toolkit Before creating question issues check for existing questions . Keep the following in mind when creating question issues: Use the question template Use a clear and descriptive title for the issue to identify the question Provide a explanation of what you want to do . Include examples, input/output descriptions etc. Describe your system to understand your environment better You may later mention this question in the discord help channel to get better insights about your problem as well Creating Pull Requests \u00b6 All pull requests should be linked to an issue pertaining to a bug or a feature enhancement, This is important as it prevents duplication of work. Early contributors can find issues to work on that have the good first issue tag. We request you to use the Pull request template to Maintain ARgorithm Server's quality Fix problems that are important to users Engage the community in working toward the best possible ARgorithm Enable a sustainable system for maintainers to review contributions Contact \u00b6 Current Maintainers TheForeverLost YatharthMathur Vin-dictive UtkG07 Join our discord server to get in touch with us and fellow contributors","title":"Contributing"},{"location":"contributing/#contributing-to-argorithm","text":"First off, thanks for taking the time to contribute! The following is a set of guidelines for contributing to ARgorithm Server, which are hosted in the ARgorithm Organization on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request. Table of contents Code of Conduct How do I contribute About ARgorithm Getting started Issues Pull requests Contact","title":"Contributing to ARgorithm"},{"location":"contributing/#code-of-conduct","text":"You can read the code of conduct here","title":"Code of conduct"},{"location":"contributing/#how-can-i-contribute","text":"We love your input! There are many ways to be contributor to our project: Reporting a bug Discussing the current state of the code Submitting a fix Proposing new features Becoming a maintainer","title":"How can I contribute"},{"location":"contributing/#about-argorithm","text":"You can read more about our project here You can read more about the internal workings of ARgorithm Project in the wiki","title":"About ARgorithm"},{"location":"contributing/#getting-started","text":"Prerequisites REST API FastAPI Asynchronous programming Docker MongoDB SQLite PostgresSQL Prometheus","title":"Getting Started"},{"location":"contributing/#environment-setup","text":"Download docker and docker-compose Download docker and docker-compose on your PC as most of the server functionalities and tests revolve around docker. You can see how to here Python Environment check your python version $ python version Python 3.7.6 Python version 3.7 and 3.8 are currently verified to be working properly so it's recommended to use those. Once you activate your environment $ git clone https://github.com/ARgorithm/Server.git Cloning into 'Server' ---> 100% $ cd Server/app $ pip install -r requirements.txt ---> 100% Successfully installed packages","title":"Environment Setup"},{"location":"contributing/#application-structure","text":"app/ The app directory contains the REST API made using FastAPI as the app module. It also contains the requirements.txt file with the application dependecies. The test/ subdirectory contains tests written for FastAPI written with the help of PyTest. The static/ folder contains static assets used in the web pages. The app module has the following submodules: api : contains the API routes which the REST API provides the endpoints core : manages the database integrations, data managers, security and other 3rd party extensions model : contains the data models as well as the execution system for ARgorithms monitoring : creates prometheus based monitoring metrics migrations : manages database migrations templates : webpages and email templates docs/ Server documentation using mkdocs with a Makefile for ease of use grafana/ Grafana configuration along with a dashboard designed specifically for ARgorithm Docker image files Dockerfile .dockerignore start.sh Has the script to start ARgorithm Server instance withing image gunicorn_conf.py Gunicorn is used to run the production server so this file is used to configure that in the image. Docker compose files Docker compose files can be used to check how the application behaves with different configurations in different environments. Read more here Prometheus conf Files These files are used for setting up prometheus and alertmanager for Server instance prometheus.yml alertmanager.yml alert.rules.yml You can find more information in the docs or get in touch with us.","title":"Application Structure"},{"location":"contributing/#creating-issues","text":"Issues are divided into 3 types for simplicity Bug Report ( template ) Feature Request ( template ) Question ( template )","title":"Creating Issues"},{"location":"contributing/#bug-report","text":"Before submitting a bug report, check for similar bug reports Explain the problem and include additional details to help maintainers reproduce the problem: Use the bug report template Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. For example, start by explaining how you used ARgorithm, e.g. which command exactly you used in the terminal. When listing steps, don't just say what you did, but explain how you did it . Provide specific examples to demonstrate the steps . Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. If you're providing snippets in the issue, use Markdown code blocks . Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior. Explain which behavior you expected to see instead and why. Include screenshots and animated GIFs which show you following the described steps and clearly demonstrate the problem. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. If you're reporting that Server crashed , include a crash report with a stack trace. If the problem is related to performance or memory , include a CPU profile capture with your report. If the problem wasn't triggered by a specific action , describe what you were doing before the problem happened and share more information using the guidelines below. Provide more context by answering these questions: Did the problem start happening recently (e.g. after updating to a new version of ARgorithm) or was this always a problem? Can you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens. Include details about your configuration and environment: Which version of dependencies are you using? You can get that by using your python package manager If not using the Docker image, What's the name and version of the OS you're using ? Which packages do you have installed? You can get that list by running pip list .","title":"Bug report"},{"location":"contributing/#feature-request","text":"Before creating enhancement suggestions, please check for similar already existing requests as you might find out that you don't need to create one. When you are creating an enhancement suggestion, please include as many details as possible. Fill in the template, including the steps that you imagine you would take if the feature you're requesting existed. Use the feature request template Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Provide specific examples to demonstrate the steps . Include copy/pasteable snippets which you use in those examples, as Markdown code blocks . Describe the current behavior and explain which behavior you expected to see instead and why. Include screenshots and animated GIFs which help you demonstrate the steps or point out the part of Atom which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. Explain why this enhancement would be useful to most ARgorithm users","title":"Feature request"},{"location":"contributing/#question","text":"Question issues are so that users to ask how to use different features of ARgorithm toolkit Before creating question issues check for existing questions . Keep the following in mind when creating question issues: Use the question template Use a clear and descriptive title for the issue to identify the question Provide a explanation of what you want to do . Include examples, input/output descriptions etc. Describe your system to understand your environment better You may later mention this question in the discord help channel to get better insights about your problem as well","title":"Question"},{"location":"contributing/#creating-pull-requests","text":"All pull requests should be linked to an issue pertaining to a bug or a feature enhancement, This is important as it prevents duplication of work. Early contributors can find issues to work on that have the good first issue tag. We request you to use the Pull request template to Maintain ARgorithm Server's quality Fix problems that are important to users Engage the community in working toward the best possible ARgorithm Enable a sustainable system for maintainers to review contributions","title":"Creating Pull Requests"},{"location":"contributing/#contact","text":"Current Maintainers TheForeverLost YatharthMathur Vin-dictive UtkG07 Join our discord server to get in touch with us and fellow contributors","title":"Contact"},{"location":"help/","text":"Drop an issue at the repository and add the question label. You can also get in touch with us yatharth.mathur@gmail.com alansandra2013@gmail.com vinay.valson@gmail.com utkarsh19sep@gmail.com","title":"Need help?"}]}